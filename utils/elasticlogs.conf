input {
	stdin {}
}

filter {
    if "dehttps" in [message] {
        drop {}
    }

    grok {
        match => [ "message" , '"%{IPORHOST:clientip}" %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QUOTEDSTRING:referrer} %{QUOTEDSTRING:agent}']
	}

    if "_grokparsefailure" in [tags] {
        drop {}
    }

    mutate {
        gsub => ["message", "%{ident}", "-", "message", "[\"]%{clientip}[\"]", "%{clientip}"]
    }

    date {
        match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
    }

    mutate {
        remove_field => ["host", "timestamp"]
    }
   
    geoip {
        source => "clientip"
        target => "geoip"
    }
  
    useragent {
        source => "agent"
        target => "useragent"
    }

    mutate {
        remove_field => ["host", "[geoip][region_code]", "[geoip][country_code3]", "[geoip][city_name]", "[geoip][country_code2]", "[geoip][region_name]", "[geoip][longitude]", "[geoip][latitude]", "[geoip][timezone]", "[geoip][continent_code]", "[geoip][ip]", "[useragent][os_major]", "[useragent][os_minor]", "[useragent][patch]", "[useragent][major]", "[useragent][device]", "[useragent][minor]", "@version", "tags", "ident", "auth"]
    }
}

output {
    stdout {
        codec => json_lines
    }
}